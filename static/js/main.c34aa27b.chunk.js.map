{"version":3,"sources":["components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","inputValue","setInputValue","error","setError","title","tasks","filter","addTask","trim","changeFilter","value","onChange","e","currentTarget","onKeyDown","key","className","onClick","map","t","id","isDone","type","checked","changeStatus","removeTask","App","taskForRender","data","v1","setTasks","setFilter","task","new_tasks","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oQAkBO,SAASA,EAASC,GAErB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,mBAAwB,MAAlD,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAQN,EAAMM,MACdC,EAAQP,EAAMO,MACdC,EAASR,EAAMQ,OACfC,EAAU,SAACH,GACO,KAAjBA,EAAMI,OACLV,EAAMS,QAAQH,EAAMI,QAEpBL,EAAS,4BAGXM,EAAe,SAACH,GAClBR,EAAMW,aAAaH,IAkBvB,OACI,6BACI,6BACI,4BAAKF,GACL,6BACI,2BACIM,MAAOV,EACPW,SAXe,SAACC,GAChCX,EAAcW,EAAEC,cAAcH,QAWdI,UAnBiB,SAACF,GAClCT,EAAS,MACI,UAAVS,EAAEG,MACDR,EAAQP,GACRC,EAAc,MAgBFe,UAAWd,EAAQ,QAAU,KAEjC,4BAAQe,QA1BM,WAC1BV,EAAQP,GACRC,EAAc,MAwBF,KACCC,GAAS,yBAAKc,UAAU,iBAAf,4BAEd,4BAEQX,EAAMa,KAAI,SAACC,GAQP,OACI,wBAAIJ,IAAKI,EAAEC,GAAIJ,UAAWG,EAAEE,OAAS,UAAY,IAC7C,2BAAOC,KAAK,WAAWC,QAASJ,EAAEE,OAAQV,SAT7B,SAACC,GAClBd,EAAM0B,aAAaL,EAAEC,GAAIR,EAAEC,cAAcU,YASrC,8BAAOJ,EAAEf,OACT,4BAAQa,QAAS,kBARLG,EAQsBD,EAAEC,QAPxCtB,EAAM2B,WAAWL,GADF,IAACA,IAQZ,eAMpB,6BACI,4BAAQJ,UAAsB,QAAXV,EAAmB,gBAAkB,GAAIW,QAAS,kBAAMR,EAAa,SAAxF,OACA,4BAAQO,UAAsB,WAAXV,EAAsB,gBAAkB,GAAIW,QAAS,kBAAMR,EAAa,YAA3F,UACA,4BAAQO,UAAsB,cAAXV,EAAyB,gBAAkB,GAAIW,QAAS,kBAAMR,EAAa,eAA9F,gBClFb,SAASiB,IAEZ,IAuCIC,EAvCEC,EAAyB,CAC3B,CAACR,GAAIS,cAAMzB,MAAO,OAAQiB,QAAQ,GAClC,CAACD,GAAIS,cAAMzB,MAAO,MAAOiB,QAAQ,GACjC,CAACD,GAAIS,cAAMzB,MAAO,KAAMiB,QAAQ,GAChC,CAACD,GAAIS,cAAMzB,MAAO,SAAUiB,QAAQ,GACpC,CAACD,GAAIS,cAAMzB,MAAO,OAAQiB,QAAQ,GAClC,CAACD,GAAIS,cAAMzB,MAAO,KAAMiB,QAAQ,GAChC,CAACD,GAAIS,cAAMzB,MAAO,SAAUiB,QAAQ,GACpC,CAACD,GAAIS,cAAMzB,MAAO,MAAOiB,QAAQ,GACjC,CAACD,GAAIS,cAAMzB,MAAO,KAAMiB,QAAQ,GAChC,CAACD,GAAKS,cAAMzB,MAAO,UAAWiB,QAAQ,GACtC,CAACD,GAAKS,cAAMzB,MAAO,QAASiB,QAAQ,GACpC,CAACD,GAAKS,cAAMzB,MAAO,OAAQiB,QAAQ,GACnC,CAACD,GAAKS,cAAMzB,MAAO,SAAUiB,QAAQ,GACrC,CAACD,GAAKS,cAAMzB,MAAO,IAAKiB,QAAQ,IAGpC,EAA0BtB,mBAAS6B,GAAnC,mBAAOvB,EAAP,KAAcyB,EAAd,KAqBA,EAA0B/B,mBAA2B,OAArD,mBAAKO,EAAL,KAAayB,EAAb,KAEA,OAAQzB,GACJ,IAAK,YACDqB,EAAgBtB,EAAMC,QAAO,SAAA0B,GAAI,OAAoB,IAAhBA,EAAKX,UAC1C,MACJ,IAAK,SACDM,EAAgBtB,EAAMC,QAAO,SAAA0B,GAAI,OAAoB,IAAhBA,EAAKX,UAC1C,MACJ,QACIM,EAAgBtB,EAMxB,OACI,yBAAKW,UAAU,OACX,kBAACnB,EAAD,CACIO,MAAO,wBACPC,MAAOsB,EACPF,WAxCO,SAACL,GAChB,IAAIa,EAAY5B,EAAMC,QAAO,SAAC0B,GAC1B,OAAOA,EAAKZ,KAAOA,KAEvBU,EAASG,IAqCD1B,QAnCI,SAACH,GACb,IACI6B,EAAS,CADC,CAACb,GAAIS,cAAMzB,MAAOA,EAAOiB,QAAQ,IAClC,mBAAgBhB,IAC7ByB,EAASG,IAiCDT,aA/BS,SAACJ,EAAYC,GAC9B,IAAIW,EAAO3B,EAAM6B,MAAK,SAAAf,GAAC,OAAIA,EAAEC,KAAOA,KACjCY,IACCA,EAAKX,OAASA,GAElBS,EAAS,YAAIzB,KA2BLI,aAZS,SAACH,GAClByB,EAAUzB,IAYFA,OAAQA,KC5DJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLiD,QAAQjD,MAAMA,EAAMkD,a","file":"static/js/main.c34aa27b.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport {FilterValuesType} from '../App'\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype TodoListPropsType = {\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    removeTask: (id: string) => void\r\n    addTask: (title: string) => void\r\n    changeStatus: (id: string, isDone: boolean) => void\r\n    changeFilter: (filter: FilterValuesType) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport function TodoList(props: TodoListPropsType) {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const title = props.title\r\n    const tasks = props.tasks\r\n    const filter = props.filter\r\n    const addTask = (title: string) => {\r\n        if(title.trim() !== \"\") {\r\n            props.addTask(title.trim())\r\n        }else {\r\n            setError(\"This field is required!\")\r\n        }\r\n    }\r\n    const changeFilter = (filter: FilterValuesType) => {\r\n        props.changeFilter(filter)\r\n    }\r\n\r\n    const addTaskOnClickHandler = () => {\r\n        addTask(inputValue)\r\n        setInputValue(\"\")\r\n    }\r\n    const addTaskOnKeyDownEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if(e.key === \"Enter\") {\r\n            addTask(inputValue)\r\n            setInputValue(\"\")\r\n        }\r\n    }\r\n    const changeInputOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>{title}</h3>\r\n                <div>\r\n                    <input\r\n                        value={inputValue}\r\n                        onChange={changeInputOnChangeHandler}\r\n                        onKeyDown={addTaskOnKeyDownEnterHandler}\r\n                        className={error ? \"error\" : \"\"}\r\n                    />\r\n                    <button onClick={addTaskOnClickHandler}>+</button>\r\n                    {error && <div className=\"error-message\">This field is required!</div>}\r\n                </div>\r\n                <ul>\r\n                    {\r\n                        tasks.map((t) => {\r\n                            const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                                props.changeStatus(t.id, e.currentTarget.checked)\r\n                            }\r\n                            const removeTask = (id: string) => {\r\n                                props.removeTask(id)\r\n                            }\r\n\r\n                            return (\r\n                                <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                                    <input type=\"checkbox\" checked={t.isDone} onChange={changeStatus}/>\r\n                                    <span>{t.title}</span>\r\n                                    <button onClick={() => removeTask(t.id)}>âœ•</button>\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n                <div>\r\n                    <button className={filter === \"all\" ? \"active-filter\" : \"\"} onClick={() => changeFilter(\"all\")}>All</button>\r\n                    <button className={filter === \"active\" ? \"active-filter\" : \"\"} onClick={() => changeFilter(\"active\")}>Active</button>\r\n                    <button className={filter === \"completed\" ? \"active-filter\" : \"\"} onClick={() => changeFilter(\"completed\")}>Completed</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {v1} from \"uuid\";\r\nimport './App.css';\r\nimport {TodoList, TasksType} from \"./components/TodoList\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport function App() {\r\n\r\n    const data: Array<TasksType> = [\r\n        {id: v1(), title: \"HTML\", isDone: true},\r\n        {id: v1(), title: \"CSS\", isDone: false},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"Python\", isDone: false},\r\n        {id: v1(), title: \"Java\", isDone: false},\r\n        {id: v1(), title: \"C#\", isDone: true},\r\n        {id: v1(), title: \"Kotlin\", isDone: true},\r\n        {id: v1(), title: \"C++\", isDone: false},\r\n        {id: v1(), title: \"1C\", isDone: false},\r\n        {id:  v1(), title: \"Haskell\", isDone: false},\r\n        {id:  v1(), title: \"Swift\", isDone: false},\r\n        {id:  v1(), title: \"Rust\", isDone: false},\r\n        {id:  v1(), title: \"Golang\", isDone: false},\r\n        {id:  v1(), title: \"C\", isDone: false}\r\n    ]\r\n\r\n    const [tasks, setTasks] = useState(data);\r\n\r\n    const removeTask = (id: string) => {\r\n        let new_tasks = tasks.filter((task) => {\r\n            return task.id !== id\r\n        })\r\n        setTasks(new_tasks)\r\n    }\r\n    const addTask = (title: string) => {\r\n        let newTask = {id: v1(), title: title, isDone: false}\r\n        let new_tasks = [newTask, ...tasks]\r\n        setTasks(new_tasks)\r\n    }\r\n    const changeStatus = (id: string, isDone: boolean) => {\r\n        let task = tasks.find(t => t.id === id)\r\n        if(task) {\r\n            task.isDone = isDone\r\n        }\r\n        setTasks([...tasks])\r\n    }\r\n\r\n    let [filter, setFilter] = useState<FilterValuesType>(\"all\")\r\n    let taskForRender;\r\n    switch (filter) {\r\n        case \"completed\":\r\n            taskForRender = tasks.filter(task => task.isDone === true)\r\n            break\r\n        case \"active\":\r\n            taskForRender = tasks.filter(task => task.isDone === false)\r\n            break\r\n        default:\r\n            taskForRender = tasks\r\n    }\r\n    const changeFilter = (filter: FilterValuesType) => {\r\n        setFilter(filter)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <TodoList\r\n                title={\"Programming languages\"}\r\n                tasks={taskForRender}\r\n                removeTask={removeTask}\r\n                addTask={addTask}\r\n                changeStatus={changeStatus}\r\n                changeFilter={changeFilter}\r\n                filter={filter}\r\n            />\r\n        </div>\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}